import React, { useState, useCallback, useEffect } from "react";
import {
  Bubble,
  Composer,
  ComposerProps,
  GiftedChat,
  IMessage,
  MessageText,
  SendProps,
  Time,
} from "react-native-gifted-chat";

import { View, Dimensions, Platform } from "react-native";
import { withRetries } from "../utils";

const messageContainerStyle = {
  marginTop: 5,
  marginBottom: 5,
  marginLeft: 10,
  marginRight: 10,
};

const messageTextStyle = {
  lineHeight: 20,
  fontSize: 16,
};

const timeContainerStyle = {
  marginLeft: 10,
  marginRight: 10,
  marginBottom: 5,
};

const renderBubble = (props: any) => (
  <Bubble
    {...props}
    containerStyle={{ margin: 50 }}
    renderMessageText={(props: any) => (
      <MessageText
        {...props}
        containerStyle={Platform.OS == "web" ? {
          left: messageContainerStyle,
          right: messageContainerStyle,
        } : {}}
        textStyle={Platform.OS == "web" ? { left: messageTextStyle, right: messageTextStyle } : {}}
        // containerStyle={{
        //   left: { paddingHorizontal: 10, paddingTop: 10, paddingBottom: 8, marginRight: 12 },
        // }}
      />
    )}
    renderTime={(props: any) => (
      <Time
        {...props}
        containerStyle={Platform.OS == "web" ? {
          left: timeContainerStyle,
          right: timeContainerStyle,
          //  { marginHorizontal: 10, paddingBottom: 10 }
        } : {}}
      />
    )}
  />
);


// Generated by https://quicktype.io

export interface MessageResponse {
  id:      string;
  history: History[];
}

export interface History {
  id:            string;
  input_orig:    string;
  input_en:      string;
  result_en:     string;
  result_lang:   string;
  time_received: string;
}


export const ChatComposer = (
  props: ComposerProps & {
    // GiftedChat passes its props to all of its `render*()`
    onSend: SendProps<IMessage>['onSend'];
    text: SendProps<IMessage>['text'];
  },
) => (
  <Composer
    {...props}
    textInputProps={{
      ...props.textInputProps,
      // for enabling the Return key to send a message only on web
      blurOnSubmit: false, //Platform.OS === 'web',
      onSubmitEditing:
        Platform.OS === 'web'
          ? () => {
              if (props.text && props.onSend) {
                props.onSend({text: props.text.trim()}, true);
              }
            }
          : undefined,
    }}
  />
);

const baseURL = "https://linguabot-pc.alexkreidler.com"

export function ExampleChat() {
  const [messages, setMessages] = useState<IMessage[]>([]);

  useEffect(() => {
    setMessages([
      {
        _id: 1,
        text: "Hola, ¿qué tal?",
        createdAt: new Date(),
        // system: true,
        
        user: {
          _id: 2,
          name: "LinguaChat",
          //   avatar: false
          //   avatar: "https://placeimg.com/140/140/any",
        },
      },
    ]);
  }, []);

  const [chatID, setChatID] = useState<string | null>(null)

  const [loading, setLoading] = useState(false)

  /** Sends a chat message */
  const sendMessage = async (msg: string, chatID: string) => {
    try {

      const msgURL = `${baseURL}/chats/${chatID}/message`
      const raw = await fetch(msgURL, {
        method: "POST",
        
        body: JSON.stringify({
          // message: {
            text: msg
          // }
        }),
        headers: {
          'content-type': "application/json"
        }
      })
      console.log(msgURL, raw);
      
      const res: MessageResponse = await raw.json()
  
      const r = res.history.reverse()[0]
      setMessages((prev) => GiftedChat.append(prev, [{
        _id: r.id,
        text: r.result_lang,
        createdAt: Date.parse(r.time_received),
        // system: true,
        user: {
          _id: 2,
          name: "LinguaChat",
          //   avatar: false
          //   avatar: "https://placeimg.com/140/140/any",
        },
      }]))
    } finally {
      setLoading(false)
    }
    // console.log();
    // return res.history[0]
  }

  useEffect(() => {
    const url = `${baseURL}/chats`
    
    
    withRetries({attempt: fetch(url, {
      method: "POST"
    }).then(async (res) => {
      console.log("req", url, res);
      const id = (await res.json()).id
      console.log("id", id);
      
      setChatID(id)
    })})
  
    return () => {
      
    }
  }, [])
  

  const onSend = useCallback((messages: IMessage[] = []) => {
    console.log("ms", messages);
    setMessages((previousMessages: any) =>
      GiftedChat.append(previousMessages, messages)
    );
    setLoading(true)
    sendMessage(messages[0].text, chatID as string)
  }, [chatID]);

  //@ts-ignore
  const { width, height } =
    Platform.OS == "web" ? Dimensions.get("window") : {};
  return (
    <View style={Platform.OS == "web" ? { width, height } : { height: "100%" }}>
      <GiftedChat
        // showUserAvatar={false}
        //   messagesContainerStyle={{messageT}}
        placeholder={loading && Platform.OS == "web" ? "Pensando..." : "Dime algo..."}
        // messagesContainerStyle={{padding: 20}}
        multiline={false}
        
        isTyping={loading}

        renderComposer={ChatComposer}
        renderBubble={renderBubble}
        alwaysShowSend
        // inverted={Platform.OS == "web" ? false : true}
        messages={messages}
        onSend={(messages) => onSend(messages)}
        user={{
          _id: 1,
        }}
      />
    </View>
  );
}
